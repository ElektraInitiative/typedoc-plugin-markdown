// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Signatures: should compile a promise that returns a symbol' 1`] = `
"▸ **promiseReturningASymbol**(): [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )<[\`User\`](../modules.md#user)\\>

##### Returns

[\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )<[\`User\`](../modules.md#user)\\>
"
`;

exports[`Signatures: should compile a promise that returns an object' 1`] = `
"▸ **promiseReturningAnObject**(): [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )<{ \`data\`: \`string\` ; \`id\`: \`string\`  }\\>

##### Returns

[\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )<{ \`data\`: \`string\` ; \`id\`: \`string\`  }\\>
"
`;

exports[`Signatures: should compile callable signature' 1`] = `
"▸ **CallableSignature**(): \`string\`

##### Returns

\`string\`
"
`;

exports[`Signatures: should compile class with constructor' 1`] = `
"• **new ClassWithConstructor**(\`x\`, \`y\`)

##### Parameters

| Name | Type |
| :------ | :------ |
| \`x\` | \`string\` |
| \`y\` | \`string\` |
"
`;

exports[`Signatures: should compile function that returns a function' 1`] = `
"▸ **functionReturningAFunction**(): <T\\>(\`x\`: \`string\`) => \`boolean\`

Comments for function

##### Returns

\`fn\`

Return comments

▸ <\`T\`\\>(\`x\`): \`boolean\`

##### Type parameters

| Name |
| :------ |
| \`T\` |

##### Parameters

| Name | Type |
| :------ | :------ |
| \`x\` | \`string\` |

##### Returns

\`boolean\`
"
`;

exports[`Signatures: should compile function that returns an object' 1`] = `
"▸ **functionReturningAnObject**(): \`Object\`

Comments for function

##### Returns

\`Object\`

Return comments

| Name | Type |
| :------ | :------ |
| \`x\` | \`number\` |
| \`y\` | \`number\` |
"
`;

exports[`Signatures: should compile function with nested typen params' 1`] = `
"▸ **functionWithNestedParams**(\`params\`, \`context\`): \`boolean\`

Some nested params.

##### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`params\` | \`Object\` | The parameters passed to the method. |
| \`params.name\` | \`string\` | The name of the new group. |
| \`params.nestedObj\` | \`Object\` | A nested object. |
| \`params.nestedObj.name\` | \`string\` | - |
| \`params.nestedObj.obj\` | \`Object\` | - |
| \`params.nestedObj.obj.name\` | () => \`void\` | - |
| \`params.nestedObj.value\` | \`number\` | - |
| \`params.parent?\` | \`number\` | - |
| \`context\` | \`any\` | The context of the method call. |

##### Returns

\`boolean\`
"
`;

exports[`Signatures: should compile function with object params' 1`] = `
"▸ **functionWithObjectParams**(\`topLevelCallback\`, \`params\`): \`void\`

My Function.

##### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`topLevelCallback\` | () => \`void\` | A top-level callback. |
| \`params\` | \`Object\` | Params object. |
| \`params.callback1\` | () => \`void\` | A callback inside an object. |
| \`params.callback2\` | () => \`void\` | A callback inside an object. |
| \`params.testParam\` | \`number\` | Some number. |

##### Returns

\`void\`
"
`;

exports[`Signatures: should compile function with reference type' 1`] = `
"▸ **functionWithReferenceType**(\`descriptor\`): \`boolean\`

##### Parameters

| Name | Type |
| :------ | :------ |
| \`descriptor\` | \`TypedPropertyDescriptor\`<\`any\`\\> |

##### Returns

\`boolean\`
"
`;

exports[`Signatures: should compile named parameters with comments' 1`] = `
"▸ **functionWithNamedParamsAndComments**(\`«destructured»?\`, \`anotherParam\`): \`void\`

FOO

##### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`«destructured»\` | \`Object\` | various options |
| › \`bar?\` | \`number\` | - |
| › \`foo?\` | \`number\` | - |
| \`anotherParam\` | \`string\` | Another param comment |

##### Returns

\`void\`
"
`;

exports[`Signatures: should compile named parameters' 1`] = `
"▸ **functionWithNamedParams**(\`«destructured»\`): \`string\`

##### Parameters

| Name | Type |
| :------ | :------ |
| \`«destructured»\` | \`Object\` |

##### Returns

\`string\`
"
`;

exports[`Signatures: should compile pipes in params and comments' 1`] = `
"▸ **functionWithPipesInParamsAndComments**(\`n\`): \`number\` \\| \`\`null\`\`

##### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`n\` | \`number\` | a\\|b |

##### Returns

\`number\` \\| \`\`null\`\`
"
`;

exports[`Signatures: should compile signature with @return comments' 1`] = `
"▸ **commentsInReturn**(): \`boolean\`

Comments with a return definition

##### Returns

\`boolean\`

Return comments
"
`;

exports[`Signatures: should compile signature with a flag' 1`] = `
"▸ \`Private\` **privateFunction**(): \`string\`

##### Returns

\`string\`
"
`;

exports[`Signatures: should compile signature with default values' 1`] = `
"▸ **functionWithDefaults**(\`valueA?\`, \`valueB?\`, \`valueC?\`, \`valueD?\`, \`valueE?\`, \`valueF?\`): \`string\`

This is a function with a parameter that has a default value.

##### Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`valueA\` | \`string\` | \`'defaultValue'\` | A parameter with a default string value. |
| \`valueB\` | \`number\` | \`100\` | A parameter with a default numeric value. |
| \`valueC\` | \`number\` | \`Number.NaN\` | A parameter with a default NaN value. |
| \`valueD\` | \`boolean\` | \`true\` | A parameter with a default boolean value. |
| \`valueE\` | \`boolean\` | \`null\` | A parameter with a default null value. |
| \`valueF\` | \`string\` | \`'<foo>'\` | - |

##### Returns

\`string\`
"
`;

exports[`Signatures: should compile signature with optional params' 1`] = `
"▸ **functionWithOptionalParam**(\`requiredParam\`, \`optionalParam?\`): \`void\`

This is a function with a parameter that is optional.

##### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`requiredParam\` | \`string\` | A normal parameter. |
| \`optionalParam?\` | \`string\` | An optional parameter. |

##### Returns

\`void\`
"
`;

exports[`Signatures: should compile signature with params' 1`] = `
"▸ **functionWithParameters**(\`paramZ\`, \`paramG\`, \`paramA\`): \`number\`

This is a function with multiple arguments and a return value.

##### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`paramZ\` | \`string\` | This is a string parameter. |
| \`paramG\` | \`any\` | This is a parameter flagged with any. |
| \`paramA\` | \`any\` | This is a **parameter** pointing to an interface. |

##### Returns

\`number\`
"
`;

exports[`Signatures: should compile signature with rest params' 1`] = `
"▸ **functionWithRest**(\`...rest\`): \`string\`

This is a function with rest parameter.

##### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`...rest\` | \`string\`[] | The rest parameter. |

##### Returns

\`string\`
"
`;

exports[`Signatures: should compile signature with union types' 1`] = `
"▸ **functionWithUnionTypes**(\`arg\`, \`...args\`): \`any\`

##### Parameters

| Name | Type |
| :------ | :------ |
| \`arg\` | \`number\` \\| \`boolean\`[] |
| \`...args\` | (\`string\` \\| \`number\`)[] |

##### Returns

\`any\`
"
`;
